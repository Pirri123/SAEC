type Option {
    id: ID!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!

    question: Question! @belongsTo
    answers: [Answer] @belongsToMany
}

extend type Query @middleware(checks: ["auth:api"]) {
    option(id: ID @eq): Option @find(model: "App\\Models\\Option")
    options: [Option!]! @all(model: "App\\Models\\Option")
}

extend type Query @middleware(checks: ["auth:api", "role:admin"]) {
    createOption(
        description: String! @rules(apply: ["required","string", "max: 255"])
        question_id: ID! @rules(apply: ["required","integer", "exists:questions,id"])
    ): Option @create


    updateOption(
        id: ID!
        description: String @rules(apply: ["string", "max: 255"])
    ): Option @update

    deleteOption(id: ID!): Option @delete
}